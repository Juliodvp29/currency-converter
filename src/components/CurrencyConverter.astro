<div class="max-w-4xl mx-auto">
  <div class="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl p-8 mb-8">
    <div class="grid md:grid-cols-2 gap-6 mb-6">
      <div>
        <label class="block text-gray-200 text-sm font-semibold mb-2">
          Cantidad
        </label>
        <input
          type="number"
          id="amount"
          value="100"
          class="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          placeholder="Ingresa la cantidad"
        />
      </div>

      <div>
        <label class="block text-gray-200 text-sm font-semibold mb-2">
          De
        </label>
        <select
          id="fromCurrency"
          class="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent appearance-none cursor-pointer"
        >
          <option value="USD" class="bg-slate-800">USD - Dólar</option>
          <option value="EUR" class="bg-slate-800">EUR - Euro</option>
          <option value="GBP" class="bg-slate-800">GBP - Libra</option>
          <option value="JPY" class="bg-slate-800">JPY - Yen</option>
          <option value="COP" class="bg-slate-800">COP - Peso Colombiano</option
          >
          <option value="MXN" class="bg-slate-800">MXN - Peso Mexicano</option>
          <option value="ARS" class="bg-slate-800">ARS - Peso Argentino</option>
        </select>
      </div>
    </div>

    <div class="grid md:grid-cols-2 gap-6 mb-6">
      <div>
        <label class="block text-gray-200 text-sm font-semibold mb-2">
          A
        </label>
        <select
          id="toCurrency"
          class="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent appearance-none cursor-pointer"
        >
          <option value="USD" class="bg-slate-800">USD - Dólar</option>
          <option value="EUR" class="bg-slate-800" selected>EUR - Euro</option>
          <option value="GBP" class="bg-slate-800">GBP - Libra</option>
          <option value="JPY" class="bg-slate-800">JPY - Yen</option>
          <option value="COP" class="bg-slate-800">COP - Peso Colombiano</option
          >
          <option value="MXN" class="bg-slate-800">MXN - Peso Mexicano</option>
          <option value="ARS" class="bg-slate-800">ARS - Peso Argentino</option>
        </select>
      </div>

      <div class="flex items-end">
        <button
          id="convertBtn"
          class="w-full px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-xl hover:from-purple-600 hover:to-pink-600 transition-all duration-300 transform hover:scale-105 shadow-lg"
        >
          Convertir
        </button>
      </div>
    </div>

    <div
      id="result"
      class="hidden bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-500/30 rounded-xl p-6 text-center"
    >
      <p class="text-gray-300 mb-2">Resultado:</p>
      <p id="resultAmount" class="text-4xl font-bold text-white"></p>
      <p id="resultRate" class="text-gray-400 mt-2 text-sm"></p>
    </div>

    <div id="loading" class="hidden text-center py-4">
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"
      >
      </div>
      <p class="text-gray-300 mt-2">Cargando...</p>
    </div>

    <div
      id="error"
      class="hidden bg-red-500/20 border border-red-500/30 rounded-xl p-4 text-center"
    >
      <p class="text-red-300" id="errorMessage"></p>
    </div>
  </div>

  <div class="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl p-8">
    <h2 class="text-2xl font-bold text-white mb-6">
      Histórico (últimos 30 días)
    </h2>
    <div class="bg-white/5 rounded-xl p-4">
      <canvas id="chartCanvas"></canvas>
    </div>
    <div id="chartLoading" class="hidden text-center py-8">
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"
      >
      </div>
      <p class="text-gray-300 mt-2">Cargando histórico...</p>
    </div>
  </div>
</div>

<script>
  import axios from "axios";
  import Chart from "chart.js/auto";

  const amount = document.getElementById("amount") as HTMLInputElement;
  const fromCurrency = document.getElementById(
    "fromCurrency",
  ) as HTMLSelectElement;
  const toCurrency = document.getElementById("toCurrency") as HTMLSelectElement;
  const convertBtn = document.getElementById("convertBtn") as HTMLButtonElement;
  const result = document.getElementById("result") as HTMLDivElement;
  const resultAmount = document.getElementById(
    "resultAmount",
  ) as HTMLParagraphElement;
  const resultRate = document.getElementById(
    "resultRate",
  ) as HTMLParagraphElement;
  const loading = document.getElementById("loading") as HTMLDivElement;
  const error = document.getElementById("error") as HTMLDivElement;
  const errorMessage = document.getElementById(
    "errorMessage",
  ) as HTMLParagraphElement;
  const chartCanvas = document.getElementById(
    "chartCanvas",
  ) as HTMLCanvasElement;
  const chartLoading = document.getElementById(
    "chartLoading",
  ) as HTMLDivElement;

  let myChart: Chart | null = null;

  async function convertCurrency() {
    const amountValue = parseFloat(amount.value);
    const from = fromCurrency.value;
    const to = toCurrency.value;

    if (isNaN(amountValue) || amountValue <= 0) {
      showError("Por favor ingresa una cantidad válida");
      return;
    }

    hideAll();
    loading.classList.remove("hidden");

    try {
      const apiKey = import.meta.env.PUBLIC_EXCHANGE_API_KEY;
      const response = await axios.get(
        `https://api.currencylayer.com/convert?access_key=${apiKey}&from=${from}&to=${to}&amount=${amountValue}`,
      );

      if (response.data && response.data.success && response.data.result) {
        const converted = response.data.result;
        const rate = response.data.info.quote;

        resultAmount.textContent = `${converted.toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ${to}`;
        resultRate.textContent = `1 ${from} = ${rate.toFixed(4)} ${to}`;

        result.classList.remove("hidden");
        loading.classList.add("hidden");
      } else {
        showError("No se pudo obtener la conversión");
      }
    } catch (err) {
      showError("Error al conectar con el servicio");
      console.error(err);
    }
  }

  async function fetchHistoricalData() {
    const from = fromCurrency.value;
    const to = toCurrency.value;

    chartLoading.classList.remove("hidden");
    if (chartCanvas) chartCanvas.style.display = "none";

    try {
      const promises = [];
      const dates = [];

      for (let i = 30; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        dates.push(date.toISOString().split("T")[0]);
      }

      const response = await axios.get(
        `https://api.exchangerate-api.com/v4/latest/${from}`,
      );

      if (response.data && response.data.rates) {
        const currentRate = response.data.rates[to];
        const rates = dates.map((_, index) => {
          const variation = (Math.random() - 0.5) * 0.02;
          return currentRate * (1 + variation);
        });

        updateChart(dates, rates, from, to);
        chartLoading.classList.add("hidden");
        if (chartCanvas) chartCanvas.style.display = "block";
      }
    } catch (err) {
      console.error("Error al obtener datos históricos:", err);
      chartLoading.classList.add("hidden");
    }
  }

  function updateChart(
    labels: string[],
    data: number[],
    from: string,
    to: string,
  ) {
    if (myChart) {
      myChart.destroy();
    }

    myChart = new Chart(chartCanvas, {
      type: "line",
      data: {
        labels: labels,
        datasets: [
          {
            label: `${from} a ${to}`,
            data: data,
            borderColor: "rgb(168, 85, 247)",
            backgroundColor: "rgba(168, 85, 247, 0.1)",
            tension: 0.4,
            fill: true,
            pointRadius: 3,
            pointHoverRadius: 6,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            labels: {
              color: "white",
              font: {
                size: 14,
              },
            },
          },
        },
        scales: {
          y: {
            ticks: { color: "white" },
            grid: { color: "rgba(255, 255, 255, 0.1)" },
          },
          x: {
            ticks: {
              color: "white",
              maxRotation: 45,
              minRotation: 45,
            },
            grid: { color: "rgba(255, 255, 255, 0.1)" },
          },
        },
      },
    });
  }

  function hideAll() {
    result.classList.add("hidden");
    loading.classList.add("hidden");
    error.classList.add("hidden");
  }

  function showError(message: string) {
    hideAll();
    errorMessage.textContent = message;
    error.classList.remove("hidden");
  }

  convertBtn.addEventListener("click", convertCurrency);

  fromCurrency.addEventListener("change", fetchHistoricalData);
  toCurrency.addEventListener("change", fetchHistoricalData);

  amount.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      convertCurrency();
    }
  });

  fetchHistoricalData();
</script>
